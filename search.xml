<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang插件</title>
    <url>/posts/32785/</url>
    <content><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1>
<p>最近项目中一个模块出现因业务变化可能经常需要扩展功能的情况, 为了避免经常性的修改主程序, 于是就需要能够像C/C<ins>动态库那样,动态加载或更换业务功能。虽然Golang可以通过system包或者CGO,轻松的加载C/C</ins>编写的动态库,但是却有:</p>
<ul>
<li>Golang与C进行数据交换时需要做复杂的转换</li>
<li>受Golang的垃圾回收机制影响,使用指针时需要特别注意,否则很可能在传入C函数时就已经被回收,成为空指针</li>
<li>不管是用CGO编写,还是用C编写,业务逻辑处理起来都没有直接用Golang方便</li>
</ul>
<p>等等诸多问题<br />
索性,Go在1.8版本之后提供了另一种动态加载功能的方式: Plugin。Plugin完全由Golang编写,通过go build --buildmode=plugin命令编译成so文件后,在Go程序中使用plugin包即可轻松加载使用。</p>
<h1 id="第一个插件"><a class="markdownIt-Anchor" href="#第一个插件"></a> 第一个插件</h1>
<p>首先创建项目test_plugin,目录结构如下:</p>
<pre><code>test_plugin/
  - main.go
  - plugins/
    - helloworld/
      - main.go
</code></pre>
<h2 id="编写插件"><a class="markdownIt-Anchor" href="#编写插件"></a> 编写插件</h2>
<p>接下来为插件helloworld添加一个导出方法:</p>
<pre class="highlight"><code class="golang"><span class="hljs-comment">// helloworld/main.go</span>

<span class="hljs-comment">// [1]</span>
<span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">&quot;fmt&quot;</span>
)

<span class="hljs-comment">// [2]</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;
    fmt.Println(<span class="hljs-string">&quot;plugin welcom has been loaded&quot;</span>)
&#125;

<span class="hljs-comment">// [3]</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Welcom</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> &#123;
    fmt.Println(<span class="hljs-string">&quot;Welcom &quot;</span> + name)
&#125;
</code></pre>
<p>然后将该插件编译为so文件, 只需执行命令:</p>
<pre><code>go build -o lib/welcom.so --buildmode=plugin test_plugin/plugins/helloworld
</code></pre>
<blockquote>
<p><strong>要点</strong>:</p>
<ul>
<li>首先, 如 <strong>[1]</strong> 所见, 插件必须属于main包</li>
<li>其次, 如 <strong>[3]</strong> 所见, 如果某个方法或者变量需要被外部程序使用, 则必须为导出变量, 即首字母大写</li>
<li>另外, 插件不需要main方法</li>
</ul>
</blockquote>
<h2 id="使用插件"><a class="markdownIt-Anchor" href="#使用插件"></a> 使用插件</h2>
<p>接下来就可以使用生成的welcom.so文件了:</p>
<pre class="highlight"><code class="golang"><span class="hljs-comment">// main.go</span>

<span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">&quot;fmt&quot;</span>

    <span class="hljs-string">&quot;plugin&quot;</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
    fmt.Println(<span class="hljs-string">&quot;begin main&quot;</span>)

    <span class="hljs-comment">// [1]</span>
    plg, err := plugin.Open(<span class="hljs-string">&quot;./lib/welcom.so&quot;</span>)
    <span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
      fmt.Println(err.Error())
      <span class="hljs-keyword">return</span>
    &#125;

    <span class="hljs-comment">// [2]</span>
    symbol, err := plg.Lookup(<span class="hljs-string">&quot;Welcom&quot;</span>)
    <span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
      fmt.Println(err.Error())
      <span class="hljs-keyword">return</span>
    &#125;

    <span class="hljs-comment">// [3]</span>
    welcom := symbol.(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span>)
    welcom(<span class="hljs-string">&quot;World&quot;</span>)
&#125;

### 

</code></pre>
<p>编译main.go并运行后,可以看到输出:</p>
<pre><code>begin main
plugin welcom has been loaded
Welcom World
</code></pre>
<h3 id="plugin包"><a class="markdownIt-Anchor" href="#plugin包"></a> plugin包</h3>
<p>Golang的plugin包很简单, 只提供了两个方法:</p>
<pre><code>func Open(path string) (*Plugin, error)
func (P *Plugin) Lookup(symName string) (Symbol, error)
</code></pre>
<p>Open方法接受一个string类型的参数, 表示要加载的插件的路径, 可以为相对路径或绝对路径。其返回一个plugin.Plugin对象, 当成功加载插件后, 就可以使用该对象的Lookup方法来尝试获取插件中的指定方法, 如上例中的 <strong>[2]</strong> 所示。通常, 插件的方法或变量要能被外部使用,则必须被导出, 否则Lookup方法将返回错误。<br />
当使用Lookup方法成功获取到要使用的变量/方法后,其返回一个 <em><strong>指针</strong></em>, 指向被导出变量/方法, 通常我们要像上例中 <strong>[3]</strong> 将之转为我们需要的类型来使用。</p>
<h3 id="插件加载顺序"><a class="markdownIt-Anchor" href="#插件加载顺序"></a> 插件加载顺序</h3>
<p>从上面的输出可以看出, 当插件被加载后首先会执行插件的init()方法</p>
<h1 id="坑点"><a class="markdownIt-Anchor" href="#坑点"></a> 坑点</h1>
<blockquote>
<h2 id="同一插件只会被加载一次supsup"><a class="markdownIt-Anchor" href="#同一插件只会被加载一次supsup"></a> 同一插件只会被加载一次<sup></sup></h2>
</blockquote>
<h3 id="现象"><a class="markdownIt-Anchor" href="#现象"></a> 现象</h3>
<p><em><strong>重复加载完全相同的插件(路径,文件名, 内容完全一致)两次, 实际上第二次会直接返回第一次的对象</strong></em></p>
<p>首先来修改一下main.go文件, 在main方法里, 我们调用两次Open方法来加载welcom插件看看</p>
<pre class="highlight"><code class="golang"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">&quot;fmt&quot;</span>
	<span class="hljs-string">&quot;plugin&quot;</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getPluginMethod</span><span class="hljs-params">(pluginPath, method <span class="hljs-type">string</span>)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;
	plugin, err := plugin.Open(pluginPath)
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err
	&#125;
	fmt.Println(plugin)

	<span class="hljs-keyword">return</span> plugin.Lookup(method)
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
	fmt.Println(<span class="hljs-string">&quot;begin main&quot;</span>)

	_, err := getPluginMethod(<span class="hljs-string">&quot;./lib/welcom.so&quot;</span>, <span class="hljs-string">&quot;Welcom&quot;</span>)
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		fmt.Println(err.Error())
		<span class="hljs-keyword">return</span>
	&#125;

	_, err = getPluginMethod(<span class="hljs-string">&quot;./lib/welcom.so&quot;</span>, <span class="hljs-string">&quot;Welcom&quot;</span>)
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		fmt.Println(err.Error())
		<span class="hljs-keyword">return</span>
	&#125;

&#125;
</code></pre>
<p>运行后, 输出如下:</p>
<pre><code>[root@localhost plugin]# go run main.go
begin main
plugin welcom has been loaded
&amp;&#123;test_plugin/plugins/helloworld  0xc0000240c0 map[Welcom:0x7f87780a1e80]&#125;
&amp;&#123;test_plugin/plugins/helloworld  0xc0000240c0 map[Welcom:0x7f87780a1e80]&#125;
</code></pre>
<p>可以看到两次加载返回的Plugin对象实际指向同一地址, 并且init方法实际只执行了一次</p>
<blockquote>
<h2 id="不能重复加载"><a class="markdownIt-Anchor" href="#不能重复加载"></a> 不能重复加载</h2>
</blockquote>
<p>该问题分为两种情况:</p>
<ul>
<li>
<h3 id="插件源码路径及文件名完全相同-但内容不同同一插件的不同版本"><a class="markdownIt-Anchor" href="#插件源码路径及文件名完全相同-但内容不同同一插件的不同版本"></a> 插件源码路径及文件名完全相同, 但内容不同(同一插件的不同版本)</h3>
</li>
</ul>
<p>我们首先来修改helloworld/main.go文件, 并编译生成hello.so文件</p>
<pre class="highlight"><code class="golang"><span class="hljs-comment">// helloworld/main.go</span>

<span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">&quot;fmt&quot;</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;
    fmt.Println(<span class="hljs-string">&quot;plugin hello has been loaded&quot;</span>)
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> &#123;
    fmt.Println(<span class="hljs-string">&quot;Hello &quot;</span> + name)
&#125;

</code></pre>
<p>最终目录结构:</p>
<pre><code>test_plugin/
  - main.go
  - plugins/
    - helloworld/
      - main.go
  - lib/
    - hello.so
    - welcom.so
</code></pre>
<p><a href="http://xn--mainhello-tl6nq9dgvtgteva520j037b28mp5a286gkks9k9l.xn--sowelcom-0c2n.so">然后我们在main方法中同时加载hello.so和welcom.so</a></p>
<pre class="highlight"><code class="golang"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">&quot;fmt&quot;</span>
	<span class="hljs-string">&quot;plugin&quot;</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getPluginMethod</span><span class="hljs-params">(pluginPath, method <span class="hljs-type">string</span>)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;
	plugin, err := plugin.Open(pluginPath)
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err
	&#125;

  <span class="hljs-keyword">return</span> plugin.Lookup(method)
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
	fmt.Println(<span class="hljs-string">&quot;begin main&quot;</span>)

  helloSymbol, err := getPluginMethod(<span class="hljs-string">&quot;./lib/hello.so&quot;</span>, <span class="hljs-string">&quot;Hello&quot;</span>)
  <span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		fmt.Println(err.Error())
		<span class="hljs-keyword">return</span>
  &#125;

	welcomSymbol, err := getPluginMethod(<span class="hljs-string">&quot;./lib/welcom.so&quot;</span>, <span class="hljs-string">&quot;Welcom&quot;</span>)
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		fmt.Println(err.Error())
		<span class="hljs-keyword">return</span>
  &#125;

  hello, ok := helloSymbol.(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span>)
  <span class="hljs-keyword">if</span> !ok &#123;
    fmt.Println(<span class="hljs-string">&quot;hello must be func(string)&quot;</span>)
    <span class="hljs-keyword">return</span> 
  &#125;

  welcom, ok := welcomSymbol.(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span>)
  <span class="hljs-keyword">if</span> !ok &#123;
    fmt.Println(<span class="hljs-string">&quot;welcom must be func(string)&quot;</span>)
    <span class="hljs-keyword">return</span> 
  &#125;

  hello(<span class="hljs-string">&quot;World&quot;</span>)
  welcom(<span class="hljs-string">&quot;World&quot;</span>)
&#125;
</code></pre>
<p>运行后输出:</p>
<pre><code>[root@localhost plugin]# go run main.go
begin main
plugin hello has been loaded
plugin.Open(&quot;./lib/welcom&quot;): plugin already loaded
</code></pre>
<p>这里我们明明加载的是不同插件,为什么会报plugin already loaded错误呢?<br />
首先, Golang插件并不是通过文件名来判断插件是否一样的, 而是通过pluginpath来判断的, 默认情况下, 插件的pluginpath是由内部算法生成, 格式为: “plugin/unnamed-” + root.Package.Internal.BuildID。在上面的例子中, 我们只是修改了helloworld/main.go文件, 其pluginpath并没有因为内容的改变而变化, 所以被判断为同一插件。又由于插件内容发生了变化, 所以抛出了错误。</p>
<h4 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h4>
<blockquote>
<p><strong>1.12及以前版本</strong></p>
</blockquote>
<p>我们可以在编译时指定 --ldflags=&quot;-pluginpath=xxx&quot;来修改pluginpath。</p>
<pre><code>go build -o lib/hello.so --buildmode=plugin --ldflags=&quot;-pluginpath=hello&quot; test_plugin/plugins/helloworld
</code></pre>
<blockquote>
<p><strong>1.13及以上版本</strong></p>
</blockquote>
<p>1.13及以上版本修改pluginpath的话, 会在载入plugin时, 报 could not find symbol 错误, 目前有两种解决方法:</p>
<ul>
<li>
<p>在编译脚本中, 添加移动命令, 使源码路径不同</p>
</li>
<li>
<p>我们在例子中都是按照包来编译的, 事实上如果直接使用main.go编译, 则最终插件的pluginpath中计算BuildID时会将源文件hash, 如:<br />
go build -o lib/hello.so plugins/helloworld/main.go<br />
go build -o lib/welcom.so plugins/helloworld/main.go</p>
<p>这样编译出的两个插件可以同时加载<br />
运行test_plugin/main.go后, 输出如下:</p>
<pre><code>[root@localhost plugin]# go run main.go
begin main
plugin hello has been loaded
&amp;&#123;plugin/unnamed-afaca2345a9b922ec7f099641931847c502569ca  0xc0000240c0 map[Hello:0x7fce554c7f40]&#125;
plugin hello has been loaded
&amp;&#123;plugin/unnamed-0a49c149f030bba7f1e3ff737985365cb997b9e2  0xc000024120 map[Welcom:0x7fce55032f40]&#125;
</code></pre>
</li>
<li>
<h3 id="插件内容完全相同-仅文件名不同-同时加载报错"><a class="markdownIt-Anchor" href="#插件内容完全相同-仅文件名不同-同时加载报错"></a> 插件内容完全相同, 仅文件名不同, 同时加载报错</h3>
</li>
</ul>
<p><a href="http://xn--welcom-9m7io1e5wi9tckx5akw6p.so">首先复制一份welcom.so</a>, 并命名为welcom@v2.so, 然后修改main.go, 如下:</p>
<pre class="highlight"><code class="golang"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">&quot;fmt&quot;</span>
	<span class="hljs-string">&quot;plugin&quot;</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getPluginMethod</span><span class="hljs-params">(pluginPath, method <span class="hljs-type">string</span>)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;
	plugin, err := plugin.Open(pluginPath)
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err
	&#125;
	fmt.Println(plugin)

	<span class="hljs-keyword">return</span> plugin.Lookup(method)
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
	fmt.Println(<span class="hljs-string">&quot;begin main&quot;</span>)

	_, err := getPluginMethod(<span class="hljs-string">&quot;./lib/welcom.so&quot;</span>, <span class="hljs-string">&quot;Welcom&quot;</span>)
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		fmt.Println(err.Error())
		<span class="hljs-keyword">return</span>
	&#125;

	_, err = getPluginMethod(<span class="hljs-string">&quot;./lib/welcom@v2.so&quot;</span>, <span class="hljs-string">&quot;Welcom&quot;</span>)
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		fmt.Println(err.Error())
		<span class="hljs-keyword">return</span>
	&#125;

&#125;
</code></pre>
<p>输出如下:</p>
<pre><code>[root@localhost plugin]# go run main.go
begin main
plugin welcom has been loaded
&amp;&#123;test_plugin/plugins/helloworld  0xc0000240c0 map[Welcom:0x7f7b919b8e80]&#125;
plugin.Open(&quot;./lib/welcom@v2&quot;): plugin already loaded
</code></pre>
<blockquote>
<h2 id="多个plugin中相同的依赖包只会被导入一次"><a class="markdownIt-Anchor" href="#多个plugin中相同的依赖包只会被导入一次"></a> 多个plugin中相同的依赖包只会被导入一次</h2>
</blockquote>
<p>如标题所述, 如果多个plugin中导入了相同的依赖包, 那么该依赖只会在第一个插件载入的同时进行加载, 随后的所有相关插件载入时都不会重复导入该依赖, 并且即使各个插件在编译时实际依赖的包的版本不同, 只要该依赖的导入路径没有变化, 就不会重复导入, 甚至如果主程序中已经导入过该依赖, 挂在所有插件都不会重新导入该依赖。所以, <em><strong>在公共依赖中应尽可能不去使用全局变量, 编译插件时, 应尽可能保证所用依赖的版本相同。</strong></em></p>
<blockquote>
<h2 id="复杂对象传值问题"><a class="markdownIt-Anchor" href="#复杂对象传值问题"></a> 复杂对象传值问题</h2>
</blockquote>
<h3 id="现象-2"><a class="markdownIt-Anchor" href="#现象-2"></a> 现象</h3>
<p>首先修改plugins/helloworld/main.go文件</p>
<pre class="highlight"><code class="golang"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">&quot;fmt&quot;</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;
	fmt.Println(<span class="hljs-string">&quot;plugin welcom has been loaded&quot;</span>)
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Welcom</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> &#123;
	fmt.Println(<span class="hljs-string">&quot;Welcom &quot;</span> + name)
&#125;

<span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;
	Name <span class="hljs-type">string</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(user *User)</span></span> &#123;
	fmt.Println(<span class="hljs-string">&quot;Hello &quot;</span> + user.Name)
&#125;
</code></pre>
<p>test_plugin/main.go修改为</p>
<pre class="highlight"><code class="golang"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
  <span class="hljs-string">&quot;fmt&quot;</span>
  <span class="hljs-string">&quot;plugin&quot;</span>
)

<span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;
	Name <span class="hljs-type">string</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getPluginMethod</span><span class="hljs-params">(pluginPath, method <span class="hljs-type">string</span>)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;
	plugin, err := plugin.Open(pluginPath)
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err
	&#125;
	fmt.Println(plugin)

	<span class="hljs-keyword">return</span> plugin.Lookup(method)
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callHello</span><span class="hljs-params">(pluginPath <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;
	symbol, err := getPluginMethod(pluginPath, <span class="hljs-string">&quot;Hello&quot;</span>)
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		<span class="hljs-keyword">return</span> err
	&#125;
	hello, ok := symbol.(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*User)</span></span>)
	<span class="hljs-keyword">if</span> !ok &#123;
		<span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;Hello must be func(*main.User), not %T&quot;</span>, symbol)
	&#125;
	hello(&amp;User&#123;
		Name: <span class="hljs-string">&quot;World&quot;</span>,
	&#125;)
	<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
	fmt.Println(<span class="hljs-string">&quot;begin main&quot;</span>)

	err := callHello(<span class="hljs-string">&quot;./lib/hello.so&quot;</span>)

	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		fmt.Println(err.Error())
		<span class="hljs-keyword">return</span>
	&#125;
&#125;
</code></pre>
<p>运行后输出:</p>
<pre><code>[root@localhost plugin]# go run main.go
begin main
plugin welcom has been loaded
&amp;&#123;test_plugin/plugins/helloworld  0xc0000240c0 map[Hello:0x7f711d7c62c0 Welcom:0x7f711d7c61e0]&#125;
Hello must be func*(main.User), not func(*main.User)
</code></pre>
<h3 id="解决方案-2"><a class="markdownIt-Anchor" href="#解决方案-2"></a> 解决方案</h3>
<ul>
<li>
<p>方案1: 在主程序与插件之间进行数据交换时应尽可能使用接口, 如:</p>
<p>将test_plugin/plugins/helloworld/main.go修改为</p>
<pre class="highlight"><code class="golang"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
  <span class="hljs-string">&quot;fmt&quot;</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;
  fmt.Println(<span class="hljs-string">&quot;plugin welcom has been loaded&quot;</span>)
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Welcom</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> &#123;
  fmt.Println(<span class="hljs-string">&quot;Welcom &quot;</span> + name)
&#125;

<span class="hljs-keyword">type</span> User <span class="hljs-keyword">interface</span> &#123;
  Name() <span class="hljs-type">string</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(u <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;
  user, ok := u.(User)
  <span class="hljs-keyword">if</span> !ok &#123;
    fmt.Println(<span class="hljs-string">&quot;not a valid user&quot;</span>)
    <span class="hljs-keyword">return</span>
  &#125;
  fmt.Println(<span class="hljs-string">&quot;Hello &quot;</span> + user.Name())
&#125;
</code></pre>
<p>test_plugin/main.go修改为</p>
<pre class="highlight"><code class="golang"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
  <span class="hljs-string">&quot;fmt&quot;</span>
  <span class="hljs-string">&quot;plugin&quot;</span>
)

<span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;
  name <span class="hljs-type">string</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *User)</span></span> Name() <span class="hljs-type">string</span> &#123;
  <span class="hljs-keyword">return</span> u.name
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getPluginMethod</span><span class="hljs-params">(pluginPath, method <span class="hljs-type">string</span>)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;
  plugin, err := plugin.Open(pluginPath)
  <span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err
  &#125;
  fmt.Println(plugin)

  <span class="hljs-keyword">return</span> plugin.Lookup(method)
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callHello</span><span class="hljs-params">(pluginPath <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;
  symbol, err := getPluginMethod(pluginPath, <span class="hljs-string">&quot;Hello&quot;</span>)
  <span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
    <span class="hljs-keyword">return</span> err
  &#125;
  hello, ok := symbol.(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span>)
  <span class="hljs-keyword">if</span> !ok &#123;
    <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;Hello must be func(*main.User), not %T&quot;</span>, symbol)
  &#125;
  hello(&amp;User&#123;
    name: <span class="hljs-string">&quot;World&quot;</span>,
  &#125;)
  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
  fmt.Println(<span class="hljs-string">&quot;begin main&quot;</span>)

  err := callHello(<span class="hljs-string">&quot;./lib/hello.so&quot;</span>)

  <span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
    fmt.Println(err.Error())
    <span class="hljs-keyword">return</span>
  &#125;
&#125;
</code></pre>
<p>运行后输出为:</p>
<pre><code>[root@localhost plugin]# go run main.go
begin main
plugin welcom has been loaded
&amp;&#123;test_plugin/plugins/helloworld  0xc0000240c0 map[Hello:0x7f05b2f7d2c0 Welcom:0x7f05b2f7d1e0]&#125;
Hello World
</code></pre>
</li>
<li>
<p>方案2: 在公共库中定义需要交换的数据结构</p>
</li>
</ul>
<blockquote>
<h2 id="内存泄漏"><a class="markdownIt-Anchor" href="#内存泄漏"></a> 内存泄漏</h2>
</blockquote>
<p>这个很好理解, 主要原因还是Golang插件只能打开而不能卸载, 在实现热加载功能时, 稍一不注意就会出现内存泄漏</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/posts/48230/</url>
    <content><![CDATA[<h1 id="网络配置"><a class="markdownIt-Anchor" href="#网络配置"></a> 网络配置</h1>
<ul>
<li>
<h2 id="防火墙配置"><a class="markdownIt-Anchor" href="#防火墙配置"></a> 防火墙配置</h2>
<pre class="highlight"><code class="shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">CentOS 启用防火墙</span>
firewall-cmd --enable 
<span class="hljs-meta prompt_">
# </span><span class="language-bash">CentOS 开启、重启、关闭防火墙服务</span>
systemctl start firewalld
systemctl restart firewalld
systemctl stop firewalld
<span class="hljs-meta prompt_">
# </span><span class="language-bash">CentOS 临时开放端口, 注意不可以调用firewall-cmd --reload命令, 一旦调用将失效</span>
firewall-cmd --zone=public --add-port=9200/tcp
<span class="hljs-meta prompt_">
# </span><span class="language-bash">CentOS 永久开放端口</span>
firewall-cmd --zone=public --add-port=9200/tcp --permanent
firewall-cmd --reload
<span class="hljs-meta prompt_">
# </span><span class="language-bash">CentOS 取消端口开放</span>
firewall-cmd --zone=public --remove-port=9200/tcp
firewall-cmd --reload
</code></pre>
</li>
<li>
<h2 id="网络连接设置"><a class="markdownIt-Anchor" href="#网络连接设置"></a> 网络连接设置</h2>
<pre class="highlight"><code class=""># CentOS 启用网卡, 其中ifcfg-eth0为网卡
vi /etc/sysconfig/network-scripts/ifcfg-eth0
将ONBOOT=no改为ONBOOT=yes

# 重启网络服务
systemctl restart network
</code></pre>
</li>
<li>
<h2 id="连接查询"><a class="markdownIt-Anchor" href="#连接查询"></a> 连接查询</h2>
<pre class="highlight"><code class=""># 查询端口占用
1. 使用 lsof: lsof -i:5000
2. 使用 netstat: netstat -anlp | grep 5000
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang深拷贝</title>
    <url>/posts/12887/</url>
    <content><![CDATA[<h1 id="go里的copy"><a class="markdownIt-Anchor" href="#go里的copy"></a> Go里的copy</h1>
<p>在Go程序里，从变量赋值，到函数传参，对象的复制随处可见，用过其他语言的话，可能会由于惯性思维踩到Go对象复制的坑，例如：</p>
<ul>
<li>
<h2 id="变量赋值"><a class="markdownIt-Anchor" href="#变量赋值"></a> 变量赋值</h2>
</li>
</ul>
<p>在Java里类型分为基本类型和引用类型，对于基础类型的变量在赋值给另一变量时，实际是对该变量做了一次copy，点在Golang中也不例外。然而对于非基础类型的变量，在赋值给另一变量时，在Java中实际上是copy了对象的引用，对新的变量的任何修改都会反映到原变量上，例如：</p>
<pre class="highlight"><code class="java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;
      <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;
          <span class="hljs-keyword">public</span> String name;
          <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;

          <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;
              <span class="hljs-built_in">this</span>.name = name;
              <span class="hljs-built_in">this</span>.age = age;
          &#125;
      &#125;

      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
          <span class="hljs-type">Person</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-number">1</span>);
          <span class="hljs-type">Person</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a;
          b.age = <span class="hljs-number">10</span>;
          System.out.println(<span class="hljs-string">&quot;person a&#x27;s age is: &quot;</span> + a.age);
      &#125;
  &#125;
</code></pre>
<pre><code>  ❯ java ./Test.java
  person a's age is: 10
</code></pre>
<p>但是在Go里，当把一个复杂对象变量赋值给另一个变量时，实际上是做了一次浅拷贝，所以当修改新变量的非指针和引用类型字段时，原变量是不会被影响的，例如：</p>
<pre class="highlight"><code class="golang">  <span class="hljs-keyword">package</span> main

  <span class="hljs-keyword">import</span> (
          <span class="hljs-string">&quot;fmt&quot;</span>
  )

  <span class="hljs-keyword">type</span> House <span class="hljs-keyword">struct</span> &#123;
          Address <span class="hljs-type">string</span>
  &#125;

  <span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;
          Name <span class="hljs-type">string</span>
          Age <span class="hljs-type">int</span>
          House House
  &#125;


  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
          a := Person&#123;Name: <span class="hljs-string">&quot;one&quot;</span>, Age: <span class="hljs-number">1</span>, House: House&#123;Address: <span class="hljs-string">&quot;here&quot;</span>&#125;&#125;
          b := a
          b.Age = <span class="hljs-number">10</span>
          fmt.Printf(<span class="hljs-string">&quot;person a&#x27;s age is %d\n&quot;</span>, a.Age)

          b.House.Address = <span class="hljs-string">&quot;there&quot;</span>
          fmt.Printf(<span class="hljs-string">&quot;person a&#x27;s address is &#x27;%s&#x27;&quot;</span>, a.House.Address)
  &#125;
</code></pre>
<pre><code>  ❯ go run .\main.go
  person a's age is 1
  person a's address is 'here'
</code></pre>
<p>注意到修改变量b的House字段并没有影响变量a的House，这是因为House字段是值类型。在Go里除了指针、slice、map, channel、interface之外的类型其实都是值类型，所以House字段和其他所有基础类型一样，拷贝时是将整个对象进行拷贝(即值拷贝)，而不像Java那样仅仅拷贝对象的引用。</p>
<ul>
<li>
<h2 id="函数传参"><a class="markdownIt-Anchor" href="#函数传参"></a> 函数传参</h2>
</li>
</ul>
<p>在Go中函数传参实际都会发生变量的复制，即使是引用类型也不例外，并没有传引用的概念，这点要和Java区分开。所以在Go函数里修改非引用类型参数并不会改变原始参数的值，但是对于引用类型，实际是隐式传入了变量的指针，所以对于这类参数的的修改，就像Java那样会改变原始参数的值。Go函数参数传值的规范更准确的说是只针对数据结构中固定的部分传值，例如传递slice时，仅仅是对slice结构体做了浅拷贝，其间接指向的内存并不会被复制，因此如果通过一些hack的方式修改传入函数的slice结构的len字段时，并不会改变原始实参slice的len, 这一点得特别注意，如果将slice传入函数，在函数里对其扩容，原slice并不会改变，这也是为什么append函数会返回一个新的slice。</p>
<pre class="highlight"><code class="golang">  <span class="hljs-keyword">package</span> main

  <span class="hljs-keyword">import</span> (
      <span class="hljs-string">&quot;fmt&quot;</span>
      <span class="hljs-string">&quot;unsafe&quot;</span>
  )

  <span class="hljs-keyword">type</span> slice <span class="hljs-keyword">struct</span> &#123;
      array unsafe.Pointer
      <span class="hljs-built_in">len</span>   <span class="hljs-type">int</span>
      <span class="hljs-built_in">cap</span>   <span class="hljs-type">int</span>
  &#125;

  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">changeSliceLength</span><span class="hljs-params">(buf []<span class="hljs-type">int</span>)</span></span> &#123;
      fmt.Printf(<span class="hljs-string">&quot;length of buf: %d\n&quot;</span>, <span class="hljs-built_in">len</span>(buf))
      ptr := (*slice)(unsafe.Pointer(&amp;buf))
      ptr.<span class="hljs-built_in">len</span> = <span class="hljs-number">100</span>
      fmt.Printf(<span class="hljs-string">&quot;length of buf: %d\n&quot;</span>, <span class="hljs-built_in">len</span>(buf))
      buf[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>
  &#125;

  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
      a := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>)
      fmt.Printf(<span class="hljs-string">&quot;a[0]: %d, length of a: %d\n&quot;</span>, a[<span class="hljs-number">0</span>], <span class="hljs-built_in">len</span>(a))
      changeSliceLength(a)
      fmt.Printf(<span class="hljs-string">&quot;a[0]: %d, length of a: %d\n&quot;</span>, a[<span class="hljs-number">0</span>], <span class="hljs-built_in">len</span>(a))
  &#125;
</code></pre>
<pre><code>  ❯ go run .\main.go
  a[0]: 0, length of a: 5
  length of buf: 5  
  length of buf: 100
  a[0]: 1, length of a: 5
</code></pre>
<h1 id="go里如何deepcopy"><a class="markdownIt-Anchor" href="#go里如何deepcopy"></a> Go里如何deepcopy</h1>
<p>在写Go程序时，难免面遇到需要深拷贝的场景，对于没有指针或者引用类型的结构，我们仅仅需要将该对象赋值给另一个变量就能轻易实现，但实际项目中, 复杂结构免不了有指针类型或者引用类型字段，而Go里又没有像Java里的Cloneable，这个时候如何实现深拷贝？</p>
<ul>
<li>
<h2 id="基于序列化反序列化实现深拷贝"><a class="markdownIt-Anchor" href="#基于序列化反序列化实现深拷贝"></a> 基于序列化/反序列化实现深拷贝</h2>
</li>
</ul>
<p>简单地说，我们可以先把对象序列化为字符串，然后再从字符串反序列化为对象，这就完成了一次深拷贝。序列化/反序列化可以选择json、thrift、protobuf等库，这里以json为例：</p>
<pre class="highlight"><code class="golang">  <span class="hljs-keyword">package</span> main

  <span class="hljs-keyword">import</span> (
      <span class="hljs-string">&quot;fmt&quot;</span>
      <span class="hljs-string">&quot;encoding/json&quot;</span>
  )

  <span class="hljs-keyword">type</span> House <span class="hljs-keyword">struct</span> &#123;
      Address <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;address&quot;`</span>
  &#125;

  <span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;
      Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span>
      House *House <span class="hljs-string">`json:&quot;house&quot;`</span>
  &#125;

  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
      a := &amp;Person&#123;Name: <span class="hljs-string">&quot;one&quot;</span>, House: &amp;House&#123;Address: <span class="hljs-string">&quot;one&#x27;s house&quot;</span>&#125;&#125;
      as, _ := json.Marshal(a)
      <span class="hljs-keyword">var</span> b Person
      json.Unmarshal(as, &amp;b)
      b.House.Address = <span class="hljs-string">&quot;two&#x27;s house&quot;</span>
      fmt.Printf(<span class="hljs-string">&quot;a&#x27;s address: %s, b&#x27;s address: %s\n&quot;</span>, a.House.Address, b.House.Address)
  &#125;
</code></pre>
<pre><code>  ❯ go run .\main.go
  a's address: one's house, b's address: two's house
</code></pre>
<p>采用这种方式进行深拷贝需要注意，由于会先序列化为字符串，因此会额外占用内存，当对象比较大时，需要格外留意内存占用情况，即使是thrift和protobuf这样的压缩比很高的库，也是存在风险的。另外在整个序列化和反序列化过程中，有可能由于频繁创建对象、申请内存，导致cpu占用也跟着升高！！！</p>
<ul>
<li>
<h2 id="使用reflect进行深拷贝"><a class="markdownIt-Anchor" href="#使用reflect进行深拷贝"></a> 使用reflect进行深拷贝</h2>
</li>
</ul>
<p>事实上，json和protobuf在序列化和反序列化时，使用了reflect库获取对象的字段和类型，那么我们也可以直接使用reflect来递归的读取对象的字段，并进行copy，这样就减少了序列化带来的内存占用，以及频繁字节数组扩容带来的cpu占用上升问题，并且可以完全去除反序列化的过程。不过这种方式的问题是，Go的reflect.Value对象不能复用，即使是相同类型的两个不同变量，也需要重新创建reflect.Value对象，这也造成reflect性能很差。</p>
<pre class="highlight"><code class="golang"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">&quot;fmt&quot;</span>
	<span class="hljs-string">&quot;reflect&quot;</span>
)

<span class="hljs-keyword">type</span> House <span class="hljs-keyword">struct</span> &#123;
	Address <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;address&quot;`</span>
&#125;

<span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;
	Name  <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span>
	House *House <span class="hljs-string">`json:&quot;house&quot;`</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">shallowCopyValue</span><span class="hljs-params">(v reflect.Value)</span></span> reflect.Value &#123;
	<span class="hljs-keyword">switch</span> v.Type().Kind() &#123;
	<span class="hljs-keyword">case</span> reflect.Ptr:
		<span class="hljs-keyword">return</span> shallowCopyValue(v.Elem()).Addr()
	<span class="hljs-keyword">case</span> reflect.Interface:
		<span class="hljs-keyword">return</span> shallowCopyValue(v.Elem())
	<span class="hljs-keyword">case</span> reflect.Array, reflect.Map, reflect.Func, reflect.Chan:
		<span class="hljs-keyword">return</span> v
	<span class="hljs-keyword">default</span>:
		<span class="hljs-keyword">return</span> reflect.New(v.Type()).Elem()
	&#125;
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deepcopyValue</span><span class="hljs-params">(v reflect.Value)</span></span> reflect.Value &#123;
	<span class="hljs-keyword">var</span> value reflect.Value
	<span class="hljs-keyword">if</span> v.Kind() == reflect.Ptr || v.Kind() == reflect.Interface &#123;
		value = v.Elem()
	&#125; <span class="hljs-keyword">else</span> &#123;
		value = v
	&#125;
	newIns := shallowCopyValue(v)
	newValue := newIns
	<span class="hljs-keyword">if</span> v.Kind() == reflect.Ptr || v.Kind() == reflect.Interface &#123;
		newValue = newIns.Elem()
	&#125;

	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; value.Kind() == reflect.Struct &amp;&amp; i &lt; value.Type().NumField(); i++ &#123;
		field := value.Field(i)
		<span class="hljs-keyword">if</span> !field.IsValid() &#123;
			<span class="hljs-keyword">continue</span>
		&#125;
		newValue.Field(i).Set(deepcopyValue(field))
	&#125;
	<span class="hljs-keyword">return</span> newIns
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Deepcopy</span><span class="hljs-params">(ins <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-keyword">interface</span>&#123;&#125; &#123;
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> == ins &#123;
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
	&#125;
	<span class="hljs-keyword">return</span> deepcopyValue(reflect.ValueOf(ins)).Interface()
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
	a := &amp;Person&#123;Name: <span class="hljs-string">&quot;one&quot;</span>, House: &amp;House&#123;Address: <span class="hljs-string">&quot;one&#x27;s house&quot;</span>&#125;&#125;
	b := Deepcopy(a).(*Person)
	b.House.Address = <span class="hljs-string">&quot;two&#x27;s house&quot;</span>
	fmt.Printf(<span class="hljs-string">&quot;a&#x27;s address: %s, b&#x27;s address: %s\n&quot;</span>, a.House.Address, b.House.Address)
&#125;
</code></pre>
<pre><code>  ❯ go run main.go
  a's address: one's house, b's address: two's house
</code></pre>
<ul>
<li>
<h2 id="在编译期根据对象结构生成相应的复制代码"><a class="markdownIt-Anchor" href="#在编译期根据对象结构生成相应的复制代码"></a> 在编译期根据对象结构生成相应的复制代码</h2>
</li>
</ul>
<p>一般的，我们深拷贝一个简单对象，可以直接new一个新对象，然后对每个字段单独赋值来达到深拷贝的目的，这种方式相比前两种方式资源占用会更少，但是这种方式对于字段很多、层次很复杂的结构来说，要写的语句很多，而且实际开发中，任何结构都会不断变化，这种方式不能应对时刻变化的需求，如果能做到根据结构的定义，动态生成每个字段的复制代码，那不就是理想的深拷贝方法吗。幸运的是Go的标准库提供了对go文件语法解析的库<code>go/ast</code>，借助这个库我们可以在编译期递归解析代码里的结构体，生成每个字段的复制语句.</p>
<h3 id="goast包生成抽象语法树"><a class="markdownIt-Anchor" href="#goast包生成抽象语法树"></a> go/ast包生成抽象语法树</h3>
<p>先来看一个读取并解析文件的例子</p>
<pre class="highlight"><code class="golang"><span class="hljs-comment">// main.go</span>
<span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
  <span class="hljs-string">&quot;go/token&quot;</span>
  <span class="hljs-string">&quot;go/parser&quot;</span>
  <span class="hljs-string">&quot;go/ast&quot;</span>
  <span class="hljs-string">&quot;log&quot;</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, <span class="hljs-string">&quot;person.go&quot;</span>, <span class="hljs-literal">nil</span>, parser.SpuriousErrors)
	<span class="hljs-keyword">if</span> <span class="hljs-literal">nil</span> != err &#123;
		log.Fatal(err)
	&#125;
	ast.Print(fset, f)
&#125;
</code></pre>
<p>我们在这里引入的<code>go/token</code>包定义了Go语言的词法标记和其对应的基础操作，而<code>go/parser</code>包是Go源码的解析器。这里我们使用ParseFile方法解析person.go文件，其返回一个AST对象。随后我们使用ast包提供的Print方法打印整个抽象语法树。</p>
<pre class="highlight"><code class="golang"><span class="hljs-comment">// person.go</span>
<span class="hljs-keyword">package</span> main

<span class="hljs-keyword">type</span> Home <span class="hljs-keyword">struct</span> &#123;
	Address <span class="hljs-type">string</span>
&#125;

<span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;
	Name <span class="hljs-type">string</span>
	Age <span class="hljs-type">int</span>
	Home *Home
&#125;
</code></pre>
<pre><code>  ❯ go run ./main.go
    0  *ast.File &#123;
    1  .  Package: person.go:1:1
    2  .  Name: *ast.Ident &#123;
    3  .  .  NamePos: person.go:1:9
    4  .  .  Name: &quot;main&quot;
    5  .  &#125;
    6  .  Decls: []ast.Decl (len = 2) &#123;
    7  .  .  0: *ast.GenDecl &#123;
    8  .  .  .  TokPos: person.go:3:1
    9  .  .  .  Tok: type
  10  .  .  .  Lparen: -
  11  .  .  .  Specs: []ast.Spec (len = 1) &#123;
  12  .  .  .  .  0: *ast.TypeSpec &#123;
  13  .  .  .  .  .  Name: *ast.Ident &#123;
  14  .  .  .  .  .  .  NamePos: person.go:3:6
  15  .  .  .  .  .  .  Name: &quot;Home&quot;
  16  .  .  .  .  .  .  Obj: *ast.Object &#123;
  17  .  .  .  .  .  .  .  Kind: type
  18  .  .  .  .  .  .  .  Name: &quot;Home&quot;
  19  .  .  .  .  .  .  .  Decl: *(obj @ 12)
  20  .  .  .  .  .  .  &#125;
  21  .  .  .  .  .  &#125;
  22  .  .  .  .  .  Assign: -
  23  .  .  .  .  .  Type: *ast.StructType &#123;
  24  .  .  .  .  .  .  Struct: person.go:3:11
  25  .  .  .  .  .  .  Fields: *ast.FieldList &#123;
  26  .  .  .  .  .  .  .  Opening: person.go:3:18
  27  .  .  .  .  .  .  .  List: []*ast.Field (len = 1) &#123;
  28  .  .  .  .  .  .  .  .  0: *ast.Field &#123;
  29  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) &#123;
  30  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident &#123;
  31  .  .  .  .  .  .  .  .  .  .  .  NamePos: person.go:4:2
  32  .  .  .  .  .  .  .  .  .  .  .  Name: &quot;Address&quot;
  33  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object &#123;
  34  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
  35  .  .  .  .  .  .  .  .  .  .  .  .  Name: &quot;Address&quot;
  36  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 28)
  37  .  .  .  .  .  .  .  .  .  .  .  &#125;
  38  .  .  .  .  .  .  .  .  .  .  &#125;
  39  .  .  .  .  .  .  .  .  .  &#125;
  40  .  .  .  .  .  .  .  .  .  Type: *ast.Ident &#123;
  41  .  .  .  .  .  .  .  .  .  .  NamePos: person.go:4:10
  42  .  .  .  .  .  .  .  .  .  .  Name: &quot;string&quot;
  43  .  .  .  .  .  .  .  .  .  &#125;
  44  .  .  .  .  .  .  .  .  &#125;
  45  .  .  .  .  .  .  .  &#125;
  46  .  .  .  .  .  .  .  Closing: person.go:5:1
  47  .  .  .  .  .  .  &#125;
  48  .  .  .  .  .  .  Incomplete: false
  49  .  .  .  .  .  &#125;
  50  .  .  .  .  &#125;
  51  .  .  .  &#125;
  52  .  .  .  Rparen: -
  53  .  .  &#125;
  54  .  .  1: *ast.GenDecl &#123;
  55  .  .  .  TokPos: person.go:7:1
  56  .  .  .  Tok: type
  57  .  .  .  Lparen: -
  58  .  .  .  Specs: []ast.Spec (len = 1) &#123;
  59  .  .  .  .  0: *ast.TypeSpec &#123;
  60  .  .  .  .  .  Name: *ast.Ident &#123;
  61  .  .  .  .  .  .  NamePos: person.go:7:6
  62  .  .  .  .  .  .  Name: &quot;Person&quot;
  63  .  .  .  .  .  .  Obj: *ast.Object &#123;
  64  .  .  .  .  .  .  .  Kind: type
  65  .  .  .  .  .  .  .  Name: &quot;Person&quot;
  66  .  .  .  .  .  .  .  Decl: *(obj @ 59)
  67  .  .  .  .  .  .  &#125;
  68  .  .  .  .  .  &#125;
  69  .  .  .  .  .  Assign: -
  70  .  .  .  .  .  Type: *ast.StructType &#123;
  71  .  .  .  .  .  .  Struct: person.go:7:13
  72  .  .  .  .  .  .  Fields: *ast.FieldList &#123;
  73  .  .  .  .  .  .  .  Opening: person.go:7:20
  74  .  .  .  .  .  .  .  List: []*ast.Field (len = 3) &#123;
  75  .  .  .  .  .  .  .  .  0: *ast.Field &#123;
  76  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) &#123;
  77  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident &#123;
  78  .  .  .  .  .  .  .  .  .  .  .  NamePos: person.go:8:2
  79  .  .  .  .  .  .  .  .  .  .  .  Name: &quot;Name&quot;
  80  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object &#123;
  81  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
  82  .  .  .  .  .  .  .  .  .  .  .  .  Name: &quot;Name&quot;
  83  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 75)
  84  .  .  .  .  .  .  .  .  .  .  .  &#125;
  85  .  .  .  .  .  .  .  .  .  .  &#125;
  86  .  .  .  .  .  .  .  .  .  &#125;
  87  .  .  .  .  .  .  .  .  .  Type: *ast.Ident &#123;
  88  .  .  .  .  .  .  .  .  .  .  NamePos: person.go:8:7
  89  .  .  .  .  .  .  .  .  .  .  Name: &quot;string&quot;
  90  .  .  .  .  .  .  .  .  .  &#125;
  91  .  .  .  .  .  .  .  .  &#125;
  92  .  .  .  .  .  .  .  .  1: *ast.Field &#123;
  93  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) &#123;
  94  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident &#123;
  95  .  .  .  .  .  .  .  .  .  .  .  NamePos: person.go:9:2
  96  .  .  .  .  .  .  .  .  .  .  .  Name: &quot;Age&quot;
  97  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object &#123;
  98  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
  99  .  .  .  .  .  .  .  .  .  .  .  .  Name: &quot;Age&quot;
  100  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 92)
  101  .  .  .  .  .  .  .  .  .  .  .  &#125;
  102  .  .  .  .  .  .  .  .  .  .  &#125;
  103  .  .  .  .  .  .  .  .  .  &#125;
  104  .  .  .  .  .  .  .  .  .  Type: *ast.Ident &#123;
  105  .  .  .  .  .  .  .  .  .  .  NamePos: person.go:9:7
  106  .  .  .  .  .  .  .  .  .  .  Name: &quot;int&quot;
  107  .  .  .  .  .  .  .  .  .  &#125;
  108  .  .  .  .  .  .  .  .  &#125;
  109  .  .  .  .  .  .  .  .  2: *ast.Field &#123;
  110  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) &#123;
  111  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident &#123;
  112  .  .  .  .  .  .  .  .  .  .  .  NamePos: person.go:10:2
  113  .  .  .  .  .  .  .  .  .  .  .  Name: &quot;Home&quot;
  114  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object &#123;
  115  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
  116  .  .  .  .  .  .  .  .  .  .  .  .  Name: &quot;Home&quot;
  117  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 109)
  118  .  .  .  .  .  .  .  .  .  .  .  &#125;
  119  .  .  .  .  .  .  .  .  .  .  &#125;
  120  .  .  .  .  .  .  .  .  .  &#125;
  121  .  .  .  .  .  .  .  .  .  Type: *ast.StarExpr &#123;
  122  .  .  .  .  .  .  .  .  .  .  Star: person.go:10:7
  123  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident &#123;
  124  .  .  .  .  .  .  .  .  .  .  .  NamePos: person.go:10:8
  125  .  .  .  .  .  .  .  .  .  .  .  Name: &quot;Home&quot;
  126  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 16)
  127  .  .  .  .  .  .  .  .  .  .  &#125;
  128  .  .  .  .  .  .  .  .  .  &#125;
  129  .  .  .  .  .  .  .  .  &#125;
  130  .  .  .  .  .  .  .  &#125;
  131  .  .  .  .  .  .  .  Closing: person.go:11:1
  132  .  .  .  .  .  .  &#125;
  133  .  .  .  .  .  .  Incomplete: false
  134  .  .  .  .  .  &#125;
  135  .  .  .  .  &#125;
  136  .  .  .  &#125;
  137  .  .  .  Rparen: -
  138  .  .  &#125;
  139  .  &#125;
  140  .  Scope: *ast.Scope &#123;
  141  .  .  Objects: map[string]*ast.Object (len = 2) &#123;
  142  .  .  .  &quot;Person&quot;: *(obj @ 63)
  143  .  .  .  &quot;Home&quot;: *(obj @ 16)
  144  .  .  &#125;
  145  .  &#125;
  146  .  Unresolved: []*ast.Ident (len = 3) &#123;
  147  .  .  0: *(obj @ 40)
  148  .  .  1: *(obj @ 87)
  149  .  .  2: *(obj @ 104)
  150  .  &#125;
  151  &#125;
</code></pre>
<p>通过与person.go源码比对，Package字段即源文件中的package关键字，Name字段即包名，而Decls字段则存放了源码中所有的结构体定义。Decls是一个ast.Decl类型的数组，go AST中所有声明节点都实现了Decl接口，因此我们在解析源码中所有结构体或类型定义时，只需要遍历Decls字段即可。<br />
注意到Decl结构的Specs字段正是类型定义，他有两个关键字段：Name表示类型的名称，Type表示实际类型，在这里，Type是*ast.StructType类型, 这与我们声明中的struct对应，事实上Type字段也可能是其他类型，如：</p>
<ul>
<li>FuncType       表示函数类型</li>
<li>InterfaceType  表示接口类型</li>
<li>ArrayType      表示数组或Slice</li>
<li>MapType        表示map</li>
<li>ChanType       表示Channel</li>
<li>Ident          表示标识符，可以表示变量名，或者基础类型如int，string</li>
<li>ParenExpr      表示括号包裹的表达式</li>
<li>SelectorExpr   表示字段选择器，如 a.field</li>
<li>StarExpr       表示指针</li>
</ul>
<p>其中StructType的Fields字段即结构体的字段列表，他是Field类型的数组。Field包括两个关键字段，<code>Names</code> []*Ident类型，表示字段名, <code>Type</code> Expr类型，表示字段类型。<br />
从上面的例子，我们对go AST结构有了一个大概印象，同时可以总结出通过AST获得结构体字段列表的方法，接下来我们以Person结构举例，实际生成他的深拷贝方法看看。</p>
<h3 id="深拷贝代码生成"><a class="markdownIt-Anchor" href="#深拷贝代码生成"></a> 深拷贝代码生成</h3>
<p>拷贝一个对象，重点是拷贝对象的每一个字段，通过遍历AST树，我们可以获得Struct的字段列表，进一步生成每一个字段的复制代码。go/ast包提供了<code>func Walk(v Visitor, node Node)</code>方法遍历AST树。Walk方法需要两个参数，第一个参数需要实现Visitor接口，第二个参数即AST的节点。Walk方法深度优先的调用v.Visit(node)，如果v.Visit(node)返回了一个非nil的Visitor对象w，则Walk会对node的所有子节点调用w.Visit方法。<br />
遍历AST的第一步，我们需要找到所有的Struct节点，而所有的结构体定义都在Decls列表里，所以首先我们需要实现:<br />
- FileVisitor   从AST根节点ast.File对象读取Decls字段，返回DeclVisitor<br />
- DeclVisitor   针对Decls列表的每一个元素返回TypeVisitor<br />
- TypeVisitor   识别type关键字声明的类型节点</p>
<pre class="highlight"><code class="golang">  <span class="hljs-keyword">type</span> FileVisitor <span class="hljs-type">int</span>
  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v FileVisitor)</span></span> Visit(node ast.Node) ast.Visitor &#123;
  	<span class="hljs-keyword">if</span> _, ok := node.(*ast.File); ok &#123;
  		<span class="hljs-keyword">return</span> DeclVisitor(<span class="hljs-number">0</span>)
  	&#125;
  	<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
  &#125;

  <span class="hljs-keyword">type</span> DeclVisitor <span class="hljs-type">int</span>
  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v DeclVisitor)</span></span> Visit(node ast.Node) ast.Visitor &#123;
  	<span class="hljs-comment">// GenDecl.Tok字段表示声明的类型，type字段定义的类型都是token.TYPE</span>
  	<span class="hljs-keyword">if</span> decl, ok := node.(*ast.GenDecl); ok &amp;&amp; decl.Tok == token.TYPE &#123;
  		<span class="hljs-keyword">return</span> TypeVisitor(<span class="hljs-number">0</span>)
  	&#125;
  	<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
  &#125;

  <span class="hljs-keyword">type</span> TypeVisitor <span class="hljs-type">int</span>
  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v TypeVisitor)</span></span> Visit(node ast.Node) ast.Visitor &#123;
  	<span class="hljs-keyword">if</span> spec, ok := node.(*ast.TypeSpec); ok &#123;
  		<span class="hljs-keyword">switch</span> spec.Type.(<span class="hljs-keyword">type</span>) &#123;
  		<span class="hljs-keyword">case</span> *ast.StructType:
  			generateStructCloneMethod(spec)
  		&#125;
  	&#125;
  	<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
  &#125;
</code></pre>
<p>在TypeVisitor中，我们通过判断节点的Type字段类型是否为*ast.StructType来识别结构体定义节点。我们利用generateStructCloneMethod来给一个结构体生成Clone方法做深拷贝。我们的目标Clone方法应当具有如下基本结构：</p>
<pre class="highlight"><code class="golang">  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *&lt;StructName&gt;)</span></span> Clone() *&lt;StructName&gt; &#123;
  	ins := <span class="hljs-built_in">new</span> &lt;StructName&gt;()
  	ins.&lt;Field&gt; = t.&lt;Field&gt;
  	ins.&lt;StructField&gt; = t.&lt;StructField&gt;.Clone()
  	...
  	<span class="hljs-keyword">return</span> ins
  &#125;
</code></pre>
<pre><code>可以看出，我们只要获取到结构体名称，和字段名列表，就可以根据以上模板生成Clone方法。
```golang
const template = `
func (t *&lt;StructName&gt;) Clone() *&lt;StructName&gt; &#123;
	ins := new(&lt;StructName&gt;)
&lt;Fields&gt;
	return ins
&#125;`

func generateStructCloneMethod(spec *ast.TypeSpec) string &#123;
	method := strings.ReplaceAll(template, &quot;&lt;StructName&gt;&quot;, spec.Name.Name)
	var fields bytes.Buffer
	for _, field := range (spec.Type.(*ast.StructType)).Fields.List &#123;
		switch st := field.Type.(type) &#123;
		case *ast.Ident:
			fields.WriteString(cloneIdentField(field.Names[0].Name, st))
		case *ast.StarExpr:
			switch id := st.X.(type) &#123;
			case *ast.Ident:
				fields.WriteString(cloneIdentField(field.Names[0].Name, id))
			&#125;
		&#125;
	&#125;
	return strings.ReplaceAll(method, &quot;&lt;Fields&gt;&quot;, fields.String())
&#125;

func cloneIdentField(fieldName string, st *ast.Ident) string &#123;
	var fieldTmp string
	if isBaseType(st.Name) &#123;
		fieldTmp = &quot;\tins.&lt;FieldName&gt; = t.&lt;FieldName&gt;\n&quot;
	&#125; else &#123;
		fieldTmp = &quot;\tins.&lt;FieldName&gt; = t.&lt;FieldName&gt;.Clone()\n&quot;
	&#125;
	return strings.ReplaceAll(fieldTmp, &quot;&lt;FieldName&gt;&quot;, fieldName)
&#125;

func isBaseType(tp string) bool &#123;
	switch tp &#123;
	case &quot;string&quot;, &quot;int&quot;, &quot;int8&quot;, &quot;int16&quot;, &quot;int32&quot;, &quot;int64&quot;, 
		&quot;uint&quot;, &quot;uint8&quot;, &quot;uint16&quot;, &quot;uint32&quot;, &quot;uint64&quot;, 
		&quot;float32&quot;, &quot;float64&quot;, &quot;bool&quot;, &quot;rune&quot;, &quot;byte&quot;:
		return true
	&#125;
	return false
&#125;
```
这里我们在处理非基础类型时假定该字段实现了Clone方法，这样不用去读取该字段原始定义。运行程序后，输出如下：

	func (t *Home) Clone() *Home &#123;
		ins := new(Home)
		ins.Address = t.Address

		return ins
	&#125;

	func (t *Person) Clone() *Person &#123;
		ins := new(Person)
		ins.Name = t.Name
		ins.Age = t.Age
		ins.Home = t.Home.Clone()

		return ins
	&#125;

我们之后只需要将程序输出追加到person.go文件即可。来看实际使用生成的Clone方法进行深拷贝的效果：
```golang
func main() &#123;
	personA := &amp;Person&#123;
		Name: &quot;A&quot;,
		Age:  10,
		Home: &amp;Home&#123;
			Address: &quot;A's home&quot;,
		&#125;,
	&#125;
	personB := personA.Clone()
	personB.Home.Address = &quot;B's home&quot;
	fmt.Printf(&quot;person a: %+v, home: %+v\n&quot;, personA, personA.Home)
	fmt.Printf(&quot;person b: %+v, home: %+v\n&quot;, personB, personB.Home)
&#125;
```
  
	❯ go run person.go
	person a: &amp;&#123;Name:A Age:10 Home:0xc000038240&#125;, home: &amp;&#123;Address:A's home&#125;
	person b: &amp;&#123;Name:A Age:10 Home:0xc000038250&#125;, home: &amp;&#123;Address:B's home&#125;

这里Person和Home结构都比较简单，所以只考虑了基础类型和指针类型的拷贝，感兴趣的读者可以试着自己实现其他类型的拷贝，这里就不赘述了。
以下为对以上的Person对象分别使用json序列化和Clone方法实现深拷贝的benchmark数据，可以看到Clone方法速度是json序列化的60倍，是反射方式的15倍，而内存占用则只有json方式的1/23，反射方式的1/5，当要复制的对象更复杂时，差距还会更大

goos: windows
goarch: amd64
pkg: clone_gen
cpu: Intel(R) Core(TM) i5-4590T CPU @ 2.00GHz
BenchmarkSerializer-4   	  385342	      2611 ns/op	     376 B/op	      10 allocs/op
BenchmarkReflect-4      	 1757689	       682.5 ns/op	      88 B/op	       5 allocs/op
BenchmarkClone-4        	29532063	        43.37 ns/op	      16 B/op	       1 allocs/op
PASS
ok  	clone_gen	4.393s
</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go深拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统服务</title>
    <url>/posts/27368/</url>
    <content><![CDATA[<h1 id="service命令"><a class="markdownIt-Anchor" href="#service命令"></a> service命令</h1>
<h2 id="service命令的使用"><a class="markdownIt-Anchor" href="#service命令的使用"></a> service命令的使用</h2>
<p>Linux系统一般使用service命令来管理服务:</p>
<pre class="highlight"><code class="shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span>
service network start
<span class="hljs-meta prompt_">
# </span><span class="language-bash">停止服务</span>
service network stop
<span class="hljs-meta prompt_">
# </span><span class="language-bash">重启服务</span>
service network restart
<span class="hljs-meta prompt_">
# </span><span class="language-bash">查看服务状态</span>
service network status
</code></pre>
<h2 id="service原理"><a class="markdownIt-Anchor" href="#service原理"></a> service原理</h2>
<p>Linux系统的服务实际上是在后台运行的命令,通常一个程序想要作为系统服务运行,首先需要在/etc/init.d目录下存放一个与服务同名的文件,例如network服务,查看/etc/init.d/network文件,其简化后内容如下:</p>
<pre class="highlight"><code class="shell">case &quot;$1&quot; in
start)
    ;;
stop)
    ;;
reload)
    ;;
force-reload|restart)
    ;;
*)
    ;;
esac
exit 0
</code></pre>
<p>可见一个系统服务管理程序只要实现对命令行参数start|stop|restart等进行处理就可以被service命令管理,在使用service xxx cmd来管理服务时,其等价于执行/etc/init.d/xxx cmd</p>
<blockquote>
<p><em>注: /etc/init.d/xxx文件必须具有可执行权限</em></p>
</blockquote>
<h2 id="开机自启动"><a class="markdownIt-Anchor" href="#开机自启动"></a> 开机自启动</h2>
<h3 id="chkconfig命令"><a class="markdownIt-Anchor" href="#chkconfig命令"></a> chkconfig命令</h3>
<p>在/etc/init.d下存放服务的管理文件只是可以让程序作为服务运行,一旦系统重启,就必须手动执行service xxx start来启动服务,大多数情况服务需要开机自启动,这时候就要用chkconfig命令:</p>
<pre class="highlight"><code class="shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加启动项</span>
chkconfig --add [command]
<span class="hljs-meta prompt_">
# </span><span class="language-bash">启用/禁用启动项</span>
chkconfig [command] on/off
</code></pre>
<p>需要注意的是,要使用chkconfig命令,文件首行必须是:</p>
<pre class="highlight"><code class="shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">chkconfig: 2345 10 90</span>
</code></pre>
<p>其中2345表示运行级别,Linux系统有0~6七个运行级别(见:<a href="#linux%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB">Linux运行级别</a>)<br />
10表示启动优先级,数字越小优先级越高,越早被启动, 取值范围0~100<br />
90表示退出优先级,数字越小优先级越高,越早被退出, 取值范围0~100</p>
<h3 id="linux运行级别"><a class="markdownIt-Anchor" href="#linux运行级别"></a> Linux运行级别</h3>
<table>
<thead>
<tr>
<th style="text-align:center">级别</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td>停机,通常不用</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td>单用户模式,与Windows系统的安全模式类似</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>多用户模式,但没有NFS支持</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td>完全多用户模式,支持NFS</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td>一般不用,在一些特殊情况下可以用它来做一些事情.例如在笔记本电脑的电池用尽时,可以切换到这个模式来做一些设置</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td>有网络支持有X-Window支持的多用户模式</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td>重新引导系统,即重启,运行命令init 6就会重启系统,不建议讲服务的运行级别设置为6</td>
</tr>
</tbody>
</table>
<h3 id="rdd目录"><a class="markdownIt-Anchor" href="#rdd目录"></a> rd*.d目录</h3>
<p>事实上要让服务开机自启动,只需要在/etc/rc.d/rc*.d目录(Ubuntu等系统是在/etc/rd*.d目录)下根据一定规则创建/etc/init.d目录中服务文件的软连接即可,其中＊表示运行级别,如rc2.d目录中表示以运行级别2启动。<br />
通常在rc*.d目录中有两种文件:</p>
<ul>
<li>以K开头的文件:在系统退出时被调用</li>
<li>以S开头的文件:在系统启动时被调用</li>
</ul>
<p>这两种文件都是对/etc/init.d/目录中的服务文件的软链接,K/S后是相应服务名,与链接的服务文件一致</p>
<blockquote>
<p><em><strong>如果只是需要开机执行某些简单命令,可以直接在/etc/rc.d/rc.local文件中添加需要开机执行的命令</strong></em></p>
</blockquote>
<h1 id="systemd"><a class="markdownIt-Anchor" href="#systemd"></a> Systemd</h1>
<p>过去Linux系统启动是采用init进程的,而init进程是串行化的,所以启动较慢,而且init进程只负责执行脚本,启动脚本需要自行处理各种异常情况,导致启动脚本常常很臃肿,为了解决这些问题,RedHat推出了Systemd初始化系统,其特点:</p>
<ul>
<li>系统引导时实现服务并行启动</li>
<li>按需启动守护进程</li>
<li>自动化的服务依赖关系管理</li>
<li>同时采用socket式与D-Bus总线式激活服务</li>
<li>系统状态快照和恢复</li>
<li>利用Linux的cgroups监视进程</li>
<li>维护挂载点和自动挂载点</li>
<li>各服务间基于依赖关系进行精密控制</li>
</ul>
<h2 id="systemctl命令的使用"><a class="markdownIt-Anchor" href="#systemctl命令的使用"></a> systemctl命令的使用</h2>
<pre class="highlight"><code class="shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重启系统</span>
sudo systemctl reboot
<span class="hljs-meta prompt_">
# </span><span class="language-bash">关闭系统,切断电源</span>
sudo systemctl poweroff
<span class="hljs-meta prompt_">
# </span><span class="language-bash">CPU停止工作</span>
sudo systemctl halt
<span class="hljs-meta prompt_">
# </span><span class="language-bash">暂停系统</span>
sudo systemctl suspend
<span class="hljs-meta prompt_">
# </span><span class="language-bash">让系统进入冬眠状态</span>
sudo systemctl hibernate
<span class="hljs-meta prompt_">
# </span><span class="language-bash">让系统进入交互式休眠状态</span>
sudo systemctl hybrid-sleep
<span class="hljs-meta prompt_">
# </span><span class="language-bash">启动进入救援状态（单用户状态）</span>
sudo systemctl rescue
<span class="hljs-meta prompt_">
# </span><span class="language-bash">服务开机自启动</span>
sudo systemctl enable xxx
<span class="hljs-meta prompt_">
# </span><span class="language-bash">禁用服务开机自启动</span>
sudo systemctl disable xxx
<span class="hljs-meta prompt_">
# </span><span class="language-bash">启动服务</span>
sudo systemctl start xxx
<span class="hljs-meta prompt_">
# </span><span class="language-bash">停止服务</span>
sudo systemctl start xxx
<span class="hljs-meta prompt_">
# </span><span class="language-bash">重启服务</span>
sudo systemctl restart xxx
<span class="hljs-meta prompt_">
# </span><span class="language-bash">杀死一个服务的所有子进程</span>
sudo systemctl kill apache.service
<span class="hljs-meta prompt_">
# </span><span class="language-bash">重新加载一个服务的配置文件</span>
sudo systemctl reload apache.service
<span class="hljs-meta prompt_">
# </span><span class="language-bash">重载所有修改过的配置文件</span>
sudo systemctl daemon-reload
<span class="hljs-meta prompt_">
# </span><span class="language-bash">显示某个 Unit 的所有底层参数</span>
systemctl show httpd.service
<span class="hljs-meta prompt_">
# </span><span class="language-bash">显示某个 Unit 的指定属性的值</span>
systemctl show -p CPUShares httpd.service
<span class="hljs-meta prompt_">
# </span><span class="language-bash">设置某个 Unit 的指定属性</span>
sudo systemctl set-property httpd.service CPUShares=500
</code></pre>
<h2 id="添加系统服务"><a class="markdownIt-Anchor" href="#添加系统服务"></a> 添加系统服务</h2>
<p>Systemd可以管理所有系统资源,在Systemd中资源被统称为Unit。Unit一共分为12种:</p>
<ul>
<li>Service unit：系统服务</li>
<li>Target unit：多个 Unit 构成的一个组</li>
<li>Device Unit：硬件设备</li>
<li>Mount Unit：文件系统的挂载点</li>
<li>Automount Unit：自动挂载点</li>
<li>Path Unit：文件或路径</li>
<li>Scope Unit：不是由 Systemd 启动的外部进程</li>
<li>Slice Unit：进程组</li>
<li>Snapshot Unit：Systemd 快照,可以切回某个快照</li>
<li>Socket Unit：进程间通信的 socket</li>
<li>Swap Unit：swap 文件</li>
<li>Timer Unit：定时器</li>
</ul>
<p>每一个Unit都有一个配置文件,告诉Systemd如何启动该Unit。默认情况下,Systemd从/etc/systemd/system读取配置文件,然而实际上该目录的文件均为/usr/lib/systemd/system目录中文件的软链接,systemctl enable用于在两个目录间建立符号链接,sytemctl diable则用于撤销链接关系。</p>
<h3 id="unit配置文件"><a class="markdownIt-Anchor" href="#unit配置文件"></a> Unit配置文件</h3>
<p>以network服务的配置文件为例,其内容如下:</p>
<pre class="highlight"><code class="shell">[Unit]
Description=Raise network interfaces
Documentation=man:interfaces(5)
DefaultDependencies=no
Wants=network.target
After=local-fs.target network-pre.target apparmor.service systemd-sysctl.service systemd-modules-load.service
Before=network.target shutdown.target network-online.target
Conflicts=shutdown.target

[Install]
WantedBy=multi-user.target
WantedBy=network-online.target

[Service]
Type=oneshot
EnvironmentFile=-/etc/default/networking
ExecStartPre=-/bin/sh -c &#x27;[ &quot;$CONFIGURE_INTERFACES&quot; != &quot;no&quot; ] &amp;&amp; [ -n &quot;$(ifquery --read-environment --list --exclude=lo)&quot; ] &amp;&amp; udevadm settle&#x27;
ExecStart=/sbin/ifup -a --read-environment
ExecStop=/sbin/ifdown -a --read-environment --exclude=lo
RemainAfterExit=true
TimeoutStartSec=5min
</code></pre>
<p>了解ini文件格式的话,不难发现Unit配置文件分为了三节(section):</p>
<ul>
<li>
<h4 id="unit"><a class="markdownIt-Anchor" href="#unit"></a> Unit</h4>
</li>
</ul>
<p>[Unit]区块通常是配置文件的第一个区块,用来定义Unit的元数据,以及配置与其他Unit的关系。它的主要字段如下:</p>
<ul>
<li>
<p>Description：简短描述</p>
</li>
<li>
<p>Documentation：文档地址</p>
</li>
<li>
<p>Requires：当前 Unit 依赖的其他 Unit,如果它们没有运行,当前 Unit 会启动失败</p>
</li>
<li>
<p>Wants：与当前 Unit 配合的其他 Unit,如果它们没有运行,当前 Unit 不会启动失败</p>
</li>
<li>
<p>BindsTo：与Requires类似,它指定的 Unit 如果退出,会导致当前 Unit 停止运行</p>
</li>
<li>
<p>Before：如果该字段指定的 Unit 也要启动,那么必须在当前 Unit 之后启动</p>
</li>
<li>
<p>After：如果该字段指定的 Unit 也要启动,那么必须在当前 Unit 之前启动</p>
</li>
<li>
<p>Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行</p>
</li>
<li>
<p>Condition…：当前 Unit 运行必须满足的条件,否则不会运行</p>
</li>
<li>
<p>Assert…：当前 Unit 运行必须满足的条件,否则会报启动失败</p>
</li>
<li>
<h4 id="install"><a class="markdownIt-Anchor" href="#install"></a> Install</h4>
</li>
</ul>
<p>[Install]通常是配置文件的最后一个区块,用来定义如何启动,以及是否开机启动。它的主要字段如下:</p>
<ul>
<li>
<p>WantedBy：它的值是一个或多个 Target,当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中</p>
</li>
<li>
<p>RequiredBy：它的值是一个或多个 Target,当前 Unit 激活时,符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中</p>
</li>
<li>
<p>Alias：当前 Unit 可用于启动的别名</p>
</li>
<li>
<p>Also：当前 Unit 激活（enable）时,会被同时激活的其他 Unit</p>
</li>
<li>
<h4 id="service"><a class="markdownIt-Anchor" href="#service"></a> Service</h4>
</li>
</ul>
<p>[Service]区块是Service 的配置,只有 Service 类型的 Unit 才有这个区块。它的主要字段如下:</p>
<ul>
<li>Type：定义启动时的进程行为。它有以下几种值。
<ul>
<li>simple：默认值,执行ExecStart指定的命令,启动主进程</li>
<li>forking：以 fork 方式从父进程创建子进程,创建后父进程会立即退出</li>
<li>oneshot：一次性进程,Systemd 会等当前服务退出,再继续往下执行</li>
<li>dbus：当前服务通过D-Bus启动</li>
<li>notify：当前服务启动完毕,会通知Systemd,再继续往下执行</li>
<li>idle：若有其他任务执行完毕,当前服务才会运行</li>
</ul>
</li>
<li>ExecStart：启动当前服务的命令,命令必须使用绝对路径,如:/bin/sh /path/to/xxx.sh</li>
<li>ExecStartPre：启动当前服务之前执行的命令,命令必须使用绝对路径</li>
<li>ExecStartPost：启动当前服务之后执行的命令,命令必须使用绝对路径</li>
<li>ExecReload：重启当前服务时执行的命令,命令必须使用绝对路径</li>
<li>ExecStop：停止当前服务时执行的命令,命令必须使用绝对路径</li>
<li>ExecStopPost：停止当前服务之后执行的命令,命令必须使用绝对路径</li>
<li>RestartSec：自动重启当前服务间隔的秒数</li>
<li>Restart：定义何种情况 Systemd 会自动重启当前服务,可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</li>
<li>TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</li>
<li>Environment：指定环境变量</li>
</ul>
<p>Unit 配置文件的完整字段清单,请参考<a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html">官方文档</a>。</p>
<h3 id="target"><a class="markdownIt-Anchor" href="#target"></a> Target</h3>
<p>启动计算机的时候,需要启动大量的 Unit。如果每一次启动,都要一一写明本次启动需要哪些 Unit,显然非常不方便。Systemd 的解决方案就是 Target。<br />
简单说,Target 就是一个 Unit 组,包含许多相关的 Unit 。启动某个 Target 的时候,Systemd 就会启动里面所有的 Unit。从这个意义上说,Target 这个概念类似于 “状态点”,启动某个Target就好比启动到某种状态。<br />
传统的init启动模式里面,有 RunLevel 的概念,跟 Target 的作用很类似。不同的是,RunLevel 是互斥的,不可能多个 RunLevel 同时启动,但是多个 Target 可以同时启动。</p>
<pre class="highlight"><code class="shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前系统的所有 Target</span>
systemctl list-unit-files --type=target
<span class="hljs-meta prompt_">
# </span><span class="language-bash">查看一个 Target 包含的所有 Unit</span>
systemctl list-dependencies multi-user.target
<span class="hljs-meta prompt_">
# </span><span class="language-bash">查看启动时的默认 Target</span>
systemctl get-default
<span class="hljs-meta prompt_">
# </span><span class="language-bash">设置启动时的默认 Target</span>
sudo systemctl set-default multi-user.target
<span class="hljs-meta prompt_">
# </span><span class="language-bash">切换 Target 时,默认不关闭前一个 Target 启动的进程,</span>
<span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl isolate 命令改变这种行为,</span>
<span class="hljs-meta prompt_"># </span><span class="language-bash">关闭前一个 Target 里面所有不属于后一个 Target 的进程</span>
sudo systemctl isolate multi-user.target
</code></pre>
<p>Target 与 传统 RunLevel 的对应关系如下。</p>
<table>
<thead>
<tr>
<th>Traditional runlevel</th>
<th>New target name</th>
<th>Symbolically linked to…</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>runlevel0.target</td>
<td>poweroff.target</td>
</tr>
<tr>
<td>1</td>
<td>runlevel1.target</td>
<td>rescue.target</td>
</tr>
<tr>
<td>2</td>
<td>runlevel2.target</td>
<td>multi-user.target</td>
</tr>
<tr>
<td>3</td>
<td>runlevel3.target</td>
<td>multi-user.target</td>
</tr>
<tr>
<td>4</td>
<td>runlevel4.target</td>
<td>multi-user.target</td>
</tr>
<tr>
<td>5</td>
<td>runlevel5.target</td>
<td>graphical.target</td>
</tr>
<tr>
<td>6</td>
<td>runlevel6.target</td>
<td>reboot.target</td>
</tr>
</tbody>
</table>
<p>它与init进程的主要差别如下:</p>
<ol>
<li>默认的 RunLevel(在/etc/inittab文件设置)现在被默认的 Target 取代,位置是/etc/systemd/system/default.target,通常符号链接到graphical.target(图形界面)或者multi-user.target(多用户命令行)。</li>
<li>启动脚本的位置,以前是/etc/init.d目录,符号链接到不同的 RunLevel 目录 (比如/etc/rc3.d、/etc/rc5.d等),现在则存放在/lib/systemd/system和/etc/systemd/system目录。</li>
<li>配置文件的位置,以前init进程的配置文件是/etc/inittab,各种服务的配置文件存放在/etc/sysconfig目录。现在的配置文件主要存放在/lib/systemd目录,在/etc/systemd目录里面的修改可以覆盖原始设置。</li>
</ol>
<h3 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h3>
<p>假设当前在/opt目录下有可执行程序demo,其用于定时从Wallpaper网站抓取一张壁纸并替换当前壁纸,我们想要开机自动执行它,首先在/usr/lib/systemd/system/目录创建demo.service文件,根据上面的说明,其内容如下:</p>
<pre class="highlight"><code class="shell">[Unit]
Description=demo service
<span class="hljs-meta prompt_"># </span><span class="language-bash">强依赖网络服务</span>
Requires=network-online.target
BindsTo=network.target
After=network.target
[Install]
[Service]
Type=simple
ExecStart=/opt/demo
ExecStart=/usr/bin/kill -9 $(/usr/bin/ps aux | grep demo | awk &#x27;&#123;print $2&#125;&#x27;) &amp;&amp; /opt/demo
EXECStop=/usr/bin/kill -9 $(/usr/bin/ps aux | grep demo | awk &#x27;&#123;print $2&#125;&#x27;)
Restart=on-failure
</code></pre>
<p>写好demo.service文件后,需要执行 systemctl daemon-reload命令来重新加载所有配置文件,然后执行systemctl enable demo命令,这样下次开机时demo程序就会自动执行。</p>
]]></content>
      <categories>
        <category>Linux运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
